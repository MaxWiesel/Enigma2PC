From 03496ae6fb5f19d1a8787c2f36f4c63c8407e59e Mon Sep 17 00:00:00 2001
From: cougar <cougar.enigma@gmail.com>
Date: Mon, 2 May 2011 09:39:48 +0000
Subject: [PATCH 1/2] Added OSD scaled to GUI.

---
 include/xine.h                   |   11 +++++
 include/xine/audio_decoder.h     |   12 +++---
 include/xine/broadcaster.h       |    4 +-
 include/xine/demux.h             |   20 ++++----
 include/xine/input_plugin.h      |   36 ++++++++--------
 include/xine/osd.h               |    8 +++-
 include/xine/scratch.h           |    6 +-
 include/xine/spu_decoder.h       |   14 +++---
 include/xine/video_decoder.h     |   14 +++---
 include/xine/xine_internal.h     |    2 +-
 src/demuxers/demux_ts.c          |   88 ++++++++++---------------------------
 src/xine-engine/osd.c            |    5 ++
 src/xine-engine/xine_interface.c |    4 ++
 13 files changed, 104 insertions(+), 120 deletions(-)

diff --git a/include/xine.h b/include/xine.h
index fdd981c..3b58347 100644
--- a/include/xine.h
+++ b/include/xine.h
@@ -1834,6 +1834,9 @@ void xine_config_reset (xine_t *self) XINE_PROTECTED;
 /* events generated from post plugins */
 #define XINE_EVENT_POST_TVTIME_FILMMODE_CHANGE   400
 
+#define XINE_EVENT_SET_VIDEO_STREAMTYPE 501
+#define XINE_EVENT_SET_AUDIO_STREAMTYPE 502
+
 /*
  * xine event struct
  */
@@ -1867,6 +1870,13 @@ typedef struct {
   char                str[256]; /* might be longer */
 } xine_ui_data_t;
 
+
+typedef struct {
+  int                 pid;
+  int                 streamtype;
+} xine_streamtype_data_t;
+
+
 /*
  * Send messages to UI. used mostly to report errors.
  */
@@ -2235,6 +2245,7 @@ void        xine_osd_set_encoding(xine_osd_t *self, const char *encoding) XINE_P
 void        xine_osd_set_position  (xine_osd_t *self, int x, int y) XINE_PROTECTED;
 void        xine_osd_show          (xine_osd_t *self, int64_t vpts) XINE_PROTECTED;
 void        xine_osd_show_unscaled (xine_osd_t *self, int64_t vpts) XINE_PROTECTED;
+void        xine_osd_show_scaled   (xine_osd_t *self, int64_t vpts) XINE_PROTECTED;
 void        xine_osd_hide          (xine_osd_t *self, int64_t vpts) XINE_PROTECTED;
 /* empty drawing area */
 void        xine_osd_clear         (xine_osd_t *self) XINE_PROTECTED;
diff --git a/include/xine/audio_decoder.h b/include/xine/audio_decoder.h
index a37967e..cd55a11 100644
--- a/include/xine/audio_decoder.h
+++ b/include/xine/audio_decoder.h
@@ -44,7 +44,7 @@ struct audio_decoder_class_s {
   /*
    * open a new instance of this plugin class
    */
-  audio_decoder_t* (*open_plugin) (audio_decoder_class_t *this, xine_stream_t *stream);
+  audio_decoder_t* (*open_plugin) (audio_decoder_class_t *thiz, xine_stream_t *stream);
 
   /**
    * @brief short human readable identifier for this plugin class
@@ -67,7 +67,7 @@ struct audio_decoder_class_s {
    * free all class-related resources
    */
 
-  void (*dispose) (audio_decoder_class_t *this);
+  void (*dispose) (audio_decoder_class_t *thiz);
 };
 
 #define default_audio_decoder_class_dispose (void (*) (audio_decoder_class_t *this))free
@@ -78,24 +78,24 @@ struct audio_decoder_s {
    * decode data from buf and feed decoded samples to
    * audio output
    */
-  void (*decode_data) (audio_decoder_t *this, buf_element_t *buf);
+  void (*decode_data) (audio_decoder_t *thiz, buf_element_t *buf);
 
   /*
    * reset decoder after engine flush (prepare for new
    * audio data not related to recently decoded data)
    */
-  void (*reset) (audio_decoder_t *this);
+  void (*reset) (audio_decoder_t *thiz);
 
   /*
    * inform decoder that a time reference discontinuity has happened.
    * that is, it must forget any currently held pts value
    */
-  void (*discontinuity) (audio_decoder_t *this);
+  void (*discontinuity) (audio_decoder_t *thiz);
 
   /*
    * close down, free all resources
    */
-  void (*dispose) (audio_decoder_t *this);
+  void (*dispose) (audio_decoder_t *thiz);
 
   /**
    * @brief Pointer to the loaded plugin node.
diff --git a/include/xine/broadcaster.h b/include/xine/broadcaster.h
index 0cd416c..723b13b 100644
--- a/include/xine/broadcaster.h
+++ b/include/xine/broadcaster.h
@@ -30,8 +30,8 @@ extern "C" {
 typedef struct broadcaster_s broadcaster_t;
 
 broadcaster_t *_x_init_broadcaster(xine_stream_t *stream, int port) XINE_MALLOC XINE_PROTECTED;
-void _x_close_broadcaster(broadcaster_t *this) XINE_PROTECTED;
-int _x_get_broadcaster_port(broadcaster_t *this) XINE_PROTECTED;
+void _x_close_broadcaster(broadcaster_t *thiz) XINE_PROTECTED;
+int _x_get_broadcaster_port(broadcaster_t *thiz) XINE_PROTECTED;
 
 
 #ifdef __cplusplus
diff --git a/include/xine/demux.h b/include/xine/demux.h
index 2803c30..9aa484a 100644
--- a/include/xine/demux.h
+++ b/include/xine/demux.h
@@ -49,7 +49,7 @@ struct demux_class_s {
   /*
    * open a new instance of this plugin class
    */
-  demux_plugin_t* (*open_plugin) (demux_class_t *this, xine_stream_t *stream, input_plugin_t *input);
+  demux_plugin_t* (*open_plugin) (demux_class_t *thiz, xine_stream_t *stream, input_plugin_t *input);
 
   /**
    * @brief short human readable identifier for this plugin class
@@ -85,7 +85,7 @@ struct demux_class_s {
   /*
    * close down, free all resources
    */
-  void (*dispose) (demux_class_t *this);
+  void (*dispose) (demux_class_t *thiz);
 };
 
 #define default_demux_class_dispose (void (*) (demux_class_t *this))free
@@ -101,7 +101,7 @@ struct demux_plugin_s {
    * fifos, then return. do not start demux thread (yet)
    */
 
-  void (*send_headers) (demux_plugin_t *this);
+  void (*send_headers) (demux_plugin_t *thiz);
 
   /*
    * ask demux to seek
@@ -122,7 +122,7 @@ struct demux_plugin_s {
    *                           starting the demuxer)
    */
 
-  int (*seek) (demux_plugin_t *this,
+  int (*seek) (demux_plugin_t *thiz,
 	       off_t start_pos, int start_time, int playing );
 
   /*
@@ -135,37 +135,37 @@ struct demux_plugin_s {
    * the demux current status
    */
 
-  int (*send_chunk) (demux_plugin_t *this);
+  int (*send_chunk) (demux_plugin_t *thiz);
 
   /*
    * free resources
    */
 
-  void (*dispose) (demux_plugin_t *this) ;
+  void (*dispose) (demux_plugin_t *thiz) ;
 
   /*
    * returns DEMUX_OK or  DEMUX_FINISHED
    */
 
-  int (*get_status) (demux_plugin_t *this) ;
+  int (*get_status) (demux_plugin_t *thiz) ;
 
   /*
    * gets stream length in miliseconds (might be estimated)
    * may return 0 for non-seekable streams
    */
 
-  int (*get_stream_length) (demux_plugin_t *this);
+  int (*get_stream_length) (demux_plugin_t *thiz);
 
   /*
    * return capabilities of demuxed stream
    */
 
-  uint32_t (*get_capabilities) (demux_plugin_t *this);
+  uint32_t (*get_capabilities) (demux_plugin_t *thiz);
 
   /*
    * request optional data from input plugin.
    */
-  int (*get_optional_data) (demux_plugin_t *this, void *data, int data_type);
+  int (*get_optional_data) (demux_plugin_t *thiz, void *data, int data_type);
 
   /*
    * "backwards" link to plugin class
diff --git a/include/xine/input_plugin.h b/include/xine/input_plugin.h
index 1d2e0bb..3f729ac 100644
--- a/include/xine/input_plugin.h
+++ b/include/xine/input_plugin.h
@@ -43,7 +43,7 @@ struct input_class_s {
    * create a new instance of this plugin class
    * return NULL if the plugin does'nt handle the given mrl
    */
-  input_plugin_t* (*get_instance) (input_class_t *this, xine_stream_t *stream, const char *mrl);
+  input_plugin_t* (*get_instance) (input_class_t *thiz, xine_stream_t *stream, const char *mrl);
 
   /**
    * @brief short human readable identifier for this plugin class
@@ -66,25 +66,25 @@ struct input_class_s {
    * ls function, optional: may be NULL
    * return value: NULL => filename is a file, **char=> filename is a dir
    */
-  xine_mrl_t ** (*get_dir) (input_class_t *this, const char *filename, int *nFiles);
+  xine_mrl_t ** (*get_dir) (input_class_t *thiz, const char *filename, int *nFiles);
 
   /*
    * generate autoplay list, optional: may be NULL
    * return value: list of MRLs
    */
-  char ** (*get_autoplay_list) (input_class_t *this, int *num_files);
+  char ** (*get_autoplay_list) (input_class_t *thiz, int *num_files);
 
   /*
    * close down, free all resources
    */
-  void (*dispose) (input_class_t *this);
+  void (*dispose) (input_class_t *thiz);
 
   /*
    * eject/load the media (if possible), optional: may be NULL
    *
    * returns 0 for temporary failures
    */
-  int (*eject_media) (input_class_t *this);
+  int (*eject_media) (input_class_t *thiz);
 };
 
 #define default_input_class_dispose (void (*) (input_class_t *this))free
@@ -95,7 +95,7 @@ struct input_plugin_s {
    * open the stream
    * return 0 if an error occured
    */
-  int (*open) (input_plugin_t *this);
+  int (*open) (input_plugin_t *thiz);
 
   /*
    * return capabilities of the current playable entity. See
@@ -113,14 +113,14 @@ struct input_plugin_s {
    * make a best-effort attempt to seek, e.g. at least
    * relative forward seeking should work.
    */
-  uint32_t (*get_capabilities) (input_plugin_t *this);
+  uint32_t (*get_capabilities) (input_plugin_t *thiz);
 
   /*
    * read nlen bytes, return number of bytes read
    * Should block until some bytes available for read;
    * a return value of 0 indicates no data available
    */
-  off_t (*read) (input_plugin_t *this, void *buf, off_t nlen);
+  off_t (*read) (input_plugin_t *thiz, void *buf, off_t nlen);
 
 
   /*
@@ -128,7 +128,7 @@ struct input_plugin_s {
    * for blocked input sources len must be == blocksize
    * the fifo parameter is only used to get access to the buffer_pool_alloc function
    */
-  buf_element_t *(*read_block)(input_plugin_t *this, fifo_buffer_t *fifo, off_t len);
+  buf_element_t *(*read_block)(input_plugin_t *thiz, fifo_buffer_t *fifo, off_t len);
 
 
   /*
@@ -136,7 +136,7 @@ struct input_plugin_s {
    *
    * if seeking failed, -1 is returned
    */
-  off_t (*seek) (input_plugin_t *this, off_t offset, int origin);
+  off_t (*seek) (input_plugin_t *thiz, off_t offset, int origin);
 
 
   /*
@@ -148,14 +148,14 @@ struct input_plugin_s {
    * note: only SEEK_SET (0) is currently supported as origin
    * note: may be NULL is not supported
    */
-  off_t (*seek_time) (input_plugin_t *this, int time_offset, int origin);
+  off_t (*seek_time) (input_plugin_t *thiz, int time_offset, int origin);
 
 
   /*
    * get current position in stream.
    *
    */
-  off_t (*get_current_pos) (input_plugin_t *this);
+  off_t (*get_current_pos) (input_plugin_t *thiz);
 
 
   /*
@@ -163,7 +163,7 @@ struct input_plugin_s {
    *
    * note: may be NULL is not supported
    */
-  int (*get_current_time) (input_plugin_t *this);
+  int (*get_current_time) (input_plugin_t *thiz);
 
 
   /*
@@ -183,7 +183,7 @@ struct input_plugin_s {
    * absolute or relative play position or possibly calculating the
    * bit rate.
    */
-  off_t (*get_length) (input_plugin_t *this);
+  off_t (*get_length) (input_plugin_t *thiz);
 
 
   /*
@@ -199,25 +199,25 @@ struct input_plugin_s {
    * make this function simply return 0 if unsure.
    */
 
-  uint32_t (*get_blocksize) (input_plugin_t *this);
+  uint32_t (*get_blocksize) (input_plugin_t *thiz);
 
 
   /*
    * return current MRL
    */
-  const char * (*get_mrl) (input_plugin_t *this);
+  const char * (*get_mrl) (input_plugin_t *thiz);
 
 
   /*
    * request optional data from input plugin.
    */
-  int (*get_optional_data) (input_plugin_t *this, void *data, int data_type);
+  int (*get_optional_data) (input_plugin_t *thiz, void *data, int data_type);
 
 
   /*
    * close stream, free instance resources
    */
-  void (*dispose) (input_plugin_t *this);
+  void (*dispose) (input_plugin_t *thiz);
 
   /*
    * "backward" link to input plugin class struct
diff --git a/include/xine/osd.h b/include/xine/osd.h
index 4447153..74dca66 100644
--- a/include/xine/osd.h
+++ b/include/xine/osd.h
@@ -91,7 +91,7 @@ struct osd_renderer_s {
    * A default palette is initialized (i sugest keeping color 0 as transparent
    * for the sake of simplicity)
    */
-  osd_object_t* (*new_object) (osd_renderer_t *this, int width, int height);
+  osd_object_t* (*new_object) (osd_renderer_t *thiz, int width, int height);
 
   /*
    * free osd object
@@ -194,7 +194,7 @@ struct osd_renderer_s {
    * loaded fonts are unloaded
    * osd objects are closed
    */
-  void (*close) (osd_renderer_t *this);
+  void (*close) (osd_renderer_t *thiz);
 
   /*
    * clear an osd object (empty drawing area)
@@ -215,6 +215,10 @@ struct osd_renderer_s {
    */
   int (*show_unscaled) (osd_object_t *osd, int64_t vpts );
 
+
+
+  int (*show_scaled) (osd_object_t *osd, int64_t vpts );
+
   /*
    * see xine.h for defined XINE_OSD_CAP_ values.
    */
diff --git a/include/xine/scratch.h b/include/xine/scratch.h
index c0c927b..f26e243 100644
--- a/include/xine/scratch.h
+++ b/include/xine/scratch.h
@@ -33,11 +33,11 @@ typedef struct scratch_buffer_s scratch_buffer_t;
 struct scratch_buffer_s {
 
   void         XINE_FORMAT_PRINTF(2, 0)
-               (*scratch_printf) (scratch_buffer_t *this, const char *format, va_list ap);
+               (*scratch_printf) (scratch_buffer_t *thiz, const char *format, va_list ap);
 
-  char       **(*get_content) (scratch_buffer_t *this);
+  char       **(*get_content) (scratch_buffer_t *thiz);
 
-  void         (*dispose) (scratch_buffer_t *this);
+  void         (*dispose) (scratch_buffer_t *thiz);
 
   char         **lines;
   char         **ordered;
diff --git a/include/xine/spu_decoder.h b/include/xine/spu_decoder.h
index 9ab926b..2ca0243 100644
--- a/include/xine/spu_decoder.h
+++ b/include/xine/spu_decoder.h
@@ -45,7 +45,7 @@ struct spu_decoder_class_s {
   /*
    * open a new instance of this plugin class
    */
-  spu_decoder_t* (*open_plugin) (spu_decoder_class_t *this, xine_stream_t *stream);
+  spu_decoder_t* (*open_plugin) (spu_decoder_class_t *thiz, xine_stream_t *stream);
 
   /**
    * @brief short human readable identifier for this plugin class
@@ -67,7 +67,7 @@ struct spu_decoder_class_s {
   /*
    * free all class-related resources
    */
-  void (*dispose) (spu_decoder_class_t *this);
+  void (*dispose) (spu_decoder_class_t *thiz);
 };
 
 #define default_spu_decoder_class_dispose (void (*) (spu_decoder_class_t *this))free
@@ -77,24 +77,24 @@ struct spu_decoder_s {
   /*
    * decode data from buf and feed the overlay to overlay manager
    */
-  void (*decode_data) (spu_decoder_t *this, buf_element_t *buf);
+  void (*decode_data) (spu_decoder_t *thiz, buf_element_t *buf);
 
   /*
    * reset decoder after engine flush (prepare for new
    * SPU data not related to recently decoded data)
    */
-  void (*reset) (spu_decoder_t *this);
+  void (*reset) (spu_decoder_t *thiz);
 
   /*
    * inform decoder that a time reference discontinuity has happened.
    * that is, it must forget any currently held pts value
    */
-  void (*discontinuity) (spu_decoder_t *this);
+  void (*discontinuity) (spu_decoder_t *thiz);
 
   /*
    * close down, free all resources
    */
-  void (*dispose) (spu_decoder_t *this);
+  void (*dispose) (spu_decoder_t *thiz);
 
   /*
    * When the SPU decoder also handles data used in user interaction,
@@ -106,7 +106,7 @@ struct spu_decoder_s {
    * This function pointer may be NULL, if the plugin does not have
    * such functionality.
    */
-  int  (*get_interact_info) (spu_decoder_t *this, void *data);
+  int  (*get_interact_info) (spu_decoder_t *thiz, void *data);
 
   /*
    * When the SPU decoder also handles menu overlays for user inter-
diff --git a/include/xine/video_decoder.h b/include/xine/video_decoder.h
index faf7eac..67775ed 100644
--- a/include/xine/video_decoder.h
+++ b/include/xine/video_decoder.h
@@ -45,7 +45,7 @@ struct video_decoder_class_s {
   /*
    * open a new instance of this plugin class
    */
-  video_decoder_t* (*open_plugin) (video_decoder_class_t *this, xine_stream_t *stream);
+  video_decoder_t* (*open_plugin) (video_decoder_class_t *thiz, xine_stream_t *stream);
 
   /**
    * @brief short human readable identifier for this plugin class
@@ -67,7 +67,7 @@ struct video_decoder_class_s {
   /*
    * free all class-related resources
    */
-  void (*dispose) (video_decoder_class_t *this);
+  void (*dispose) (video_decoder_class_t *thiz);
 };
 
 #define default_video_decoder_class_dispose (void (*) (video_decoder_class_t *this))free
@@ -78,29 +78,29 @@ struct video_decoder_s {
    * decode data from buf and feed decoded frames to
    * video output
    */
-  void (*decode_data) (video_decoder_t *this, buf_element_t *buf);
+  void (*decode_data) (video_decoder_t *thiz, buf_element_t *buf);
 
   /*
    * reset decoder after engine flush (prepare for new
    * video data not related to recently decoded data)
    */
-  void (*reset) (video_decoder_t *this);
+  void (*reset) (video_decoder_t *thiz);
 
   /*
    * inform decoder that a time reference discontinuity has happened.
    * that is, it must forget any currently held pts value
    */
-  void (*discontinuity) (video_decoder_t *this);
+  void (*discontinuity) (video_decoder_t *thiz);
 
   /*
    * flush out any frames that are still stored in the decoder
    */
-  void (*flush) (video_decoder_t *this);
+  void (*flush) (video_decoder_t *thiz);
 
   /*
    * close down, free all resources
    */
-  void (*dispose) (video_decoder_t *this);
+  void (*dispose) (video_decoder_t *thiz);
 
   /**
    * @brief Pointer to the loaded plugin node.
diff --git a/include/xine/xine_internal.h b/include/xine/xine_internal.h
index 7064539..24aad60 100644
--- a/include/xine/xine_internal.h
+++ b/include/xine/xine_internal.h
@@ -484,7 +484,7 @@ int              _x_decoder_available  (xine_t *xine, uint32_t buftype) XINE_PRO
  * load a specific video output plugin
  */
 
-vo_driver_t *_x_load_video_output_plugin(xine_t *this,
+vo_driver_t *_x_load_video_output_plugin(xine_t *thiz,
 					 char *id, int visual_type, void *visual) XINE_PROTECTED;
 
 /*
diff --git a/src/demuxers/demux_ts.c b/src/demuxers/demux_ts.c
index 49880f9..55d7a2e 100644
--- a/src/demuxers/demux_ts.c
+++ b/src/demuxers/demux_ts.c
@@ -1970,70 +1970,6 @@ static void demux_ts_parse_packet (demux_ts_t*this) {
       program_count++;
     }
 
-  if (payload_unit_start_indicator && this->media_num < MAX_PIDS){
-    int pes_stream_id;
-    if (pid == 0) {
-      demux_ts_parse_pat (this, originalPkt, originalPkt+data_offset-4,
-			  payload_unit_start_indicator);
-      return;
-    }
-    program_count = 0;
-    pes_stream_id = originalPkt[data_offset+3];
-
-#ifdef TS_HEADER_LOG
-    printf("demux_ts:ts_pes_header:stream_id=0x%.2x\n",pes_stream_id);
-#endif
-
-    if ( (pes_stream_id >= VIDEO_STREAM_S) && (pes_stream_id <= VIDEO_STREAM_E) ) {
-      if ( this->videoPid == INVALID_PID) {
-        int i, found = 0;
-        for(i = 0; i < this->media_num; i++) {
-          if (this->media[i].pid == pid) {
-            found = 1;
-            break;
-          }
-        }
-
-        if (found && (this->media[i].corrupted_pes == 0)) {
-          this->videoPid = pid;
-	  this->videoMedia = i;
-        } else if (!found) {
-	  this->videoPid = pid;
-	  this->videoMedia = this->media_num;
-	  this->media[this->videoMedia].autodetected = 1;
-	  demux_ts_pes_new(this, this->media_num++, pid, this->video_fifo, 0x100 + pes_stream_id);
-        }
-
-        if (this->videoPid != INVALID_PID) {
-          xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG,
-                   "demux_ts: auto-detected video pid 0x%.4x\n", pid);
-        }
-      }
-    } else if ( (pes_stream_id >= AUDIO_STREAM_S) && (pes_stream_id <= AUDIO_STREAM_E) ) {
-       if (this->audio_tracks_count < MAX_AUDIO_TRACKS) {
-           int i, found = 0;
-           for(i = 0; i < this->audio_tracks_count; i++) {
-               if(this->audio_tracks[i].pid == pid) {
-                   found = 1;
-                   break;
-               }
-           }
-           if(!found) {
-#ifdef TS_PMT_LOG
-               xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG,
-                        "demux_ts: auto-detected audio pid 0x%.4x\n", pid);
-#endif
-               /* store PID, index and stream no. */
-               this->audio_tracks[this->audio_tracks_count].pid = pid;
-               this->audio_tracks[this->audio_tracks_count].media_index = this->media_num;
-               this->media[this->media_num].type = this->audio_tracks_count;
-               demux_ts_pes_new(this, this->media_num++, pid,
-                                this->audio_fifo, 0x100 + pes_stream_id);
-               this->audio_tracks_count++;
-	   }
-       }
-    }
-  }
 
   if (data_len > PKT_SIZE) {
 
@@ -2111,7 +2047,31 @@ static void demux_ts_event_handler (demux_ts_t *this) {
       this->last_pmt_crc = 0;
       _x_demux_control_start (this->stream);
       break;
+    case XINE_EVENT_SET_VIDEO_STREAMTYPE:
+      printf("RECEIVED XINE_EVENT_SET_VIDEO_STREAMTYPE\n");
+ 
+      if (event->data) {
+        xine_streamtype_data_t* data = (xine_streamtype_data_t*)event->data;
+
+        this->videoPid = data->pid;
+        this->videoMedia = this->media_num;
+        demux_ts_pes_new(this, this->media_num++, data->pid, this->video_fifo, data->streamtype);
+      }
+      break;
+
+    case XINE_EVENT_SET_AUDIO_STREAMTYPE:
+      printf("RECEIVED XINE_EVENT_SET_AUDIO_STREAMTYPE\n");
 
+      if (event->data) {
+        xine_streamtype_data_t* data = (xine_streamtype_data_t*)event->data;
+
+        this->audio_tracks[this->audio_tracks_count].pid = data->pid;
+        this->audio_tracks[this->audio_tracks_count].media_index = this->media_num;
+        this->media[this->media_num].type = this->audio_tracks_count;
+        demux_ts_pes_new(this, this->media_num++, data->pid, this->audio_fifo, data->streamtype);
+        this->audio_tracks_count++;
+      }
+      break;
     }
 
     xine_event_free (event);
diff --git a/src/xine-engine/osd.c b/src/xine-engine/osd.c
index 8e48da9..6fca63f 100644
--- a/src/xine-engine/osd.c
+++ b/src/xine-engine/osd.c
@@ -511,6 +511,10 @@ static int osd_show_unscaled (osd_object_t *osd, int64_t vpts) {
   return _osd_show(osd, vpts, 1);
 }
 
+static int osd_show_gui_scaled (osd_object_t *osd, int64_t vpts) {
+  return _osd_show(osd, vpts, 2);
+}
+
 /*
  * send event to hide osd at given pts (0=now)
  * the object is not changed. there may be subsequent drawing  on it.
@@ -1917,6 +1921,7 @@ osd_renderer_t *_x_osd_renderer_init( xine_stream_t *stream ) {
   this->draw_bitmap        = osd_draw_bitmap;
   this->set_argb_buffer    = osd_set_argb_buffer;
   this->show_unscaled      = osd_show_unscaled;
+  this->show_scaled        = osd_show_gui_scaled;
   this->get_capabilities   = osd_get_capabilities;
   this->set_extent         = osd_set_extent;
   this->set_video_window   = osd_set_video_window;
diff --git a/src/xine-engine/xine_interface.c b/src/xine-engine/xine_interface.c
index ab1bafa..65efe56 100644
--- a/src/xine-engine/xine_interface.c
+++ b/src/xine-engine/xine_interface.c
@@ -825,6 +825,10 @@ void xine_osd_show_unscaled(xine_osd_t *this, int64_t vpts) {
   this->osd.renderer->show_unscaled(&this->osd, vpts);
 }
 
+void xine_osd_show_scaled(xine_osd_t *this, int64_t vpts) {
+  this->osd.renderer->show_scaled(&this->osd, vpts);
+}
+
 void xine_osd_hide(xine_osd_t *this, int64_t vpts) {
   this->osd.renderer->hide(&this->osd, vpts);
 }
-- 
1.7.1


From dbacaac8b6424c0cc71ab1ce49d1baa0a6167241 Mon Sep 17 00:00:00 2001
From: cougar <cougar.enigma@gmail.com>
Date: Mon, 2 May 2011 11:08:19 +0000
Subject: [PATCH 2/2] Forgotten file for OSD.

---
 src/video_out/video_out_vdpau.c |    9 ++++++++-
 1 files changed, 8 insertions(+), 1 deletions(-)

diff --git a/src/video_out/video_out_vdpau.c b/src/video_out/video_out_vdpau.c
index b9aef2b..382df5e 100644
--- a/src/video_out/video_out_vdpau.c
+++ b/src/video_out/video_out_vdpau.c
@@ -677,7 +677,14 @@ static void vdpau_process_overlays (vdpau_driver_t *this, vo_frame_t *frame)
     ovl_rect.x1 = ovl->x + ovl->width;
     ovl_rect.y1 = ovl->y + ovl->height;
 
-    if (!ovl->unscaled) {
+    if (ovl->unscaled==2) {
+      ovl_rect.x0 = 0;
+      ovl_rect.y0 = 0;
+      ovl_rect.x1 = this->sc.gui_width;
+      ovl_rect.y1 = this->sc.gui_height;
+      this->ovl_changed = 1;
+    }
+    else if (ovl->unscaled==0) {
       double rx, ry;
       if (ovl->extent_width > 0 && ovl->extent_height > 0) {
         rx = (double)ovl->extent_width;
-- 
1.7.1

